var _user$project$Main$toText = function (theLine) {
	return _elm_lang$html$Html$text(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(theLine.start),
			_elm_lang$core$Basics$toString(theLine.end)));
};
var _user$project$Main$drawLine = function (theLine) {
	var _p0 = theLine.end;
	var x2$ = _p0._0;
	var y2$ = _p0._1;
	var _p1 = theLine.start;
	var x1$ = _p1._0;
	var y1$ = _p1._1;
	return A2(
		_elm_lang$svg$Svg$line,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$svg$Svg_Attributes$stroke('black'),
				_elm_lang$svg$Svg_Attributes$strokeWidth('1'),
				_elm_lang$svg$Svg_Attributes$x1(
				_elm_lang$core$Basics$toString(x1$)),
				_elm_lang$svg$Svg_Attributes$x2(
				_elm_lang$core$Basics$toString(x2$)),
				_elm_lang$svg$Svg_Attributes$y1(
				_elm_lang$core$Basics$toString(y1$)),
				_elm_lang$svg$Svg_Attributes$y2(
				_elm_lang$core$Basics$toString(y2$))
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('app')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('vertex-list')
					]),
				A2(_elm_lang$core$List$map, _user$project$Main$toText, model.box)),
				A2(
				_elm_lang$svg$Svg$svg,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$svg$Svg_Attributes$width('400px'),
						_elm_lang$svg$Svg_Attributes$height('300px')
					]),
				A2(_elm_lang$core$List$map, _user$project$Main$drawLine, model.box))
			]));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Resize':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$Line2D = F2(
	function (a, b) {
		return {start: a, end: b};
	});
var _user$project$Main$Model = function (a) {
	return {box: a};
};
var _user$project$Main$MouseMove = function (a) {
	return {ctor: 'MouseMove', _0: a};
};
var _user$project$Main$Resize = function (a) {
	return {ctor: 'Resize', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$window$Window$resizes(_user$project$Main$Resize),
				_elm_lang$mouse$Mouse$moves(_user$project$Main$MouseMove)
			]));
};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {
		box: _elm_lang$core$Native_List.fromArray(
			[
				{
				start: {ctor: '_Tuple2', _0: 0, _1: 0},
				end: {ctor: '_Tuple2', _0: 100, _1: 200}
			},
				{
				start: {ctor: '_Tuple2', _0: 200, _1: 10},
				end: {ctor: '_Tuple2', _0: 220, _1: 100}
			}
			])
	},
	_1: A3(
		_elm_lang$core$Task$perform,
		function (_p3) {
			return _user$project$Main$NoOp;
		},
		function (x) {
			return _user$project$Main$Resize(x);
		},
		_elm_lang$window$Window$size)
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
