var _user$project$Rect2D$normalize = F3(
	function (inBoundary, outBoundary, theLine) {
		var _p0 = theLine.end;
		var x2$ = _p0._0;
		var y2$ = _p0._1;
		var _p1 = theLine.start;
		var x1$ = _p1._0;
		var y1$ = _p1._1;
		var xScale = _elm_lang$core$Basics$toFloat(outBoundary.maxX - outBoundary.minX) / _elm_lang$core$Basics$toFloat(inBoundary.maxX - inBoundary.minX);
		var xTranslate = outBoundary.minX - inBoundary.minX;
		var xTransform = function (x) {
			return _elm_lang$core$Basics$floor(
				((_elm_lang$core$Basics$toFloat(x - inBoundary.minX) * xScale) + _elm_lang$core$Basics$toFloat(inBoundary.minX)) + _elm_lang$core$Basics$toFloat(xTranslate));
		};
		var yScale = _elm_lang$core$Basics$toFloat(outBoundary.maxY - outBoundary.minY) / _elm_lang$core$Basics$toFloat(inBoundary.maxY - inBoundary.minY);
		var yTranslate = outBoundary.minY - inBoundary.minY;
		var yTransform = function (y) {
			return _elm_lang$core$Basics$floor(
				((_elm_lang$core$Basics$toFloat(y - inBoundary.minY) * yScale) + _elm_lang$core$Basics$toFloat(inBoundary.minY)) + _elm_lang$core$Basics$toFloat(yTranslate));
		};
		return A2(
			_user$project$Line2D$Line2D,
			{
				ctor: '_Tuple2',
				_0: xTransform(x1$),
				_1: yTransform(y1$)
			},
			{
				ctor: '_Tuple2',
				_0: xTransform(x2$),
				_1: yTransform(y2$)
			});
	});
var _user$project$Rect2D$Rect2D = F4(
	function (a, b, c, d) {
		return {minX: a, maxX: b, minY: c, maxY: d};
	});
